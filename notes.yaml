openapi: 3.0.0
externalDocs:
  description: View the Node.js code on GitHub.
  url: 'https://github.com/wkande/notes'
info:
  x-logo:
    url: 'assets/frog.png'
    altText: Notes
  license:
    name: MIT License
    url: 'https://en.wikipedia.org/wiki/MIT_License'
  title: Notes API Reference
  version: '1.1'
  contact:
    name: WyoSoft
    url: https://github.com/wkande
  description: |
    # Getting Started
    Welcome to Notes, a demonstration project created by Warren Anderson to 
    implement ReDoc and using the docs-as-code philosophy, sometimes referred to as docs-like-code.
    Other products like GitBook, Docsify and MkDocs are also a great choices.
    ## Releases
    A new release of the documentation is produced with every change of the major or minor number 
    (1.0.x) for releases of the Notes backend server.
    
    ### Current Documentation Releases
    - v1.1
    - [**v1.0** via Docsify](https://wkande.github.io/notes-docs-v1.0/)

    ### Notes Backend Releases
    Go to the [**Release Section**](https://github.com/wkande/notes/releases) of the **notes repo** on GitHub for release information about the Notes backend server.

    ## Migration
    When the Notes backend server reached v1.1.0 a new set of Documentaiton v1.1 was released. The Notes backend server has new functionality.

    >PATCH /note/:id/tags

    This new endpoint removes all tags from a note. As with other endpoints the user's email is pulled from the JWT token to identify the user.

    There are no migration steps required to use the latest release of the Notes backend server.
    ## Heroku

    There is a **Heroku Dyno** running **Notes**. Call it using CURL, with your App or with Insomnia. The dyno uses a free tier plan and may be idle. Calling an idle dyno may take a moment to come alive. Subsequent calls will be fast.

    Change the **email=me@domain.com** below to your email address. A code will be sent to your email address from support@lelandcreek.com.

    ```bash
    curl -d "email=me@domain.com" \
    -H "Content-Type: application/x-www-form-urlencoded" \
    -X POST https://docs-as-code.herokuapp.com/user/code | json_pp
    ```
servers:
  - url: https://docs-as-code.herokuapp.com
    description: Heroku
  - url: http:/localhost:3001
    description: Localhost
x-tagGroups:
  - name: API Reference
    tags:
      - Users
      - Notes
      - Tags
tags:
  - name: Users
    description: |
      In Notes a user is synonymous with an email address. Nothing more is known about the user. Users must authenticate with their 
      email address using the [Email-Code-Token](#/authenication) mechanism.
  - name: Notes
    description: |
      **Notes** have a simple structure focusing on content and tags. Each note belongs to one email address and has 
      a unique id for DML actions.
      ```json
        {
          "id": "-UB_Ja5Qq",
          "email": "me@mydomain",
          "content": "Sent a new token.",
          "tags": "token Saturday",
          "ddtm": "2020-10-17T13:52:22.027Z"
        }
      ```
  - name: Tags
    description: |
      **Tags** are embedded in notes to aid in searching. A note can have one or many tags. Tags are stored in the note as a string of words.
      ```json
      // "tags" are a group of words 
      {
        "id": "-UB_Ja5Qq",
        "email": "me@mydomain",
        "content": "Saturday go to the bank and get some cash.",
        "tags": "cash Saturday", 
        "ddtm": "2020-10-17T13:52:22.027Z"
      }
      ```
paths:
  /user/code:
    $ref: './resources/user-code-post.yaml'
  /user/token:
    $ref: './resources/user-token-get.yaml'
  /user:
    $ref: './resources/user.yaml'
  /notes:
    $ref: './resources/notes.yaml'
  /note: 
    $ref: './resources/note-post.yaml'
  /note/{id}: 
    $ref: './resources/note.yaml'
  /tags:
    $ref: './resources/tags.yaml'
  /tag/{tag}:
    $ref: './resources/tag.yaml'
components:
  schemas:
    Note:
      type: object
      required: [id,email,content,dttm]
      properties:
        id: 
          type: string
          description: A unique identifier for the note
          example: UH7_IYT6HF
        email: 
          type: string
          description: Email address of a user
          example: me@mydomain.com
        content: 
          type: string
          description: The body or main content of the note
        tags: 
          type: string
          example: Saturday Groceries
          description: A string of words used to enhance note searching
        dttm:
          type: string
          description: The timestamp the note last experienced DML, system managed
    Notes:
      type: array
      items:
        $ref: "#/components/schemas/Note"
    User:
      type: object
      properties:
        user:
          description: Contains information about the user
          type: object
          required: [email,note_cnt]
          properties:
            email: 
              type: string
              description: Email address of the current user
              example: me@mydomain.com
            notes_cnt: 
              type: integer
              description: Total number of notes associated with the user
    Code:
      type: object
      properties:
        code:
          description: Contains information about the code
          type: object
          required: [email,message,ip]
          properties:
            email:
              type: string
              format: "email=me@mydomain.com"
              description: Email address of the user
            message:
              type: string
              description: Status of the code sent to the email address
            ip:
              type: string
              description: The ip address from the client making hte request
    Token:
      type: object
      required: [token]
      properties:
        token:
          description: A JWT token
          type: string
    Tags:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
    TagReplace:
      type: object
      required: [tag_old,tag_new]
      properties:
        tag_old:
          description: the tag to replace
          type: string
        tag_new:
          description: the new spelling for the tag
          type: string
    Error:
      $ref: './schemas/error.yaml'
  responses:
    400-BadRequest:
      $ref: './responses/400-bad-request.yaml'
    401-Unauthorized:
      $ref: './responses/401-unauthorized.yaml'
    429-ToManyRequests:
      $ref: './responses/429-to-many-requests.yaml'
    431-HeaderFields431:
      $ref: './responses/431-header-fields.yaml'
    5xx:
      $ref: './responses/5xx.yaml'
  securitySchemes:
    BearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
      x-codeSamples:
        - lang: 'bash'
          source: | 
            curl -d "email=me@mydomain.com" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -H "Accept:application/json" \
            -X POST https://docs-as-code.herokuapp.com/user/code | json_pp
      description: |
        The APIs implement an **Email-Code-Token** mechanism for authentication using **[jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)**.

        1. Prompt the user for their **Email Address** and call POST /user/code. The endpoint will send a **Code** to the email address and respond with status=201.
            ```bash
            curl -d "email=me@domain.com" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -X POST https://docs-as-code.herokuapp.com/user/code
            ```
        2. Prompt the user for the **Code** and their **Email**. Send both to GET /user/token. The endpoint will respond with a **Token** and status=200.
            ```bash
            curl -H "Accept:application/json" \
            -X GET "https://docs-as-code.herokuapp.com/user/token?email=me@mydomain.com&code=123456" | json_pp
            ```
        The **Token** must be used to authenticate all other endpoints

