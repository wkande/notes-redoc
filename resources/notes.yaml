get:
  tags:
    - Notes
  summary: Get user's Notes
  description: |
    Gets a list of all **Notes** associated with a user's email address. The email address in the JWT token is used to identify the user.

    There is an optional search to filter the notes by content and tags. Optional pagination using skip 
    and limit will determine the number of notes returned.

    - /notes (all notes)
    - /notes?skip=0&limit=25 (first 25 notes, 1-25)
    - /notes?skip=25&limit=25 (notes 26-50)
    - /notes?content=Madison (notes with Madison in the content)
    - /notes?tags=Saturday%20Tuesday (notes with Saturday or Tuesday in the tags)
    - /notes?content=Madison&skip=0&limit=25 (first 25 notes with Madison in the content)
  x-codeSamples:
    - lang: 'bash'
      source: | 
        curl  -H "Accept: application/json" \
        -H "Authorization: Bearer 1234FRTG67" \
        -X GET "https://docs-as-code.herokuapp.com/notes?skip=0&limit=25" \
        | json_pp

        # Returns a list of notes
    - lang: 'javascript'
      source: |
        const axios = require('axios');
        const options = {
          "headers": {"Authorization": "Bearer 1234FRTG67", 
                      "Accept":"application/json"}
        };

        const resp = await axios.get("https://docs-as-code.herokuapp.com/notes?skip=0&limit=25", 
          {}, options)
        console.log(resp.data);

        // Returns a list of notes
  security:
    - BearerAuth: []
  parameters:
    - name: Accept
      in: header
      description: application/json (default) or application/xml
      required: false
      schema:
        type: string
        example: application/json
    #- name: Authorization
      #in: header
      #description: JWT token
      #required: true
      #schema:
        #type: string
        #example: Bearer 1234FRTG67##
    - name: content
      in: query
      description: text to search the note's content key
      required: false
      schema:
        type: string
        example: madison
    - name: tags
      in: query
      description: text to search the note's tags key
      required: false
      schema:
        type: string
        example: saturday monday
    - name: skip
      in: query
      description: starting number of a limited set of rows
      required: false
      schema:
        type: integer
        example: 25
    - name: limit
      in: query
      description: max number of rows
      required: false
      schema:
        type: integer
        example: 25
  responses:
    '200':
      description: OK
      content:
        application/json:
          example: 
            [
              {
                "id": "-UB_Ja5Qq",
                "email": "me@mydomain.com",
                "content": "Sent a new token.",
                "tags": "Monday",
                "dttm": "2020-10-17T13:52:22.027Z"
              },
              {
                "id": "AU7_Ja5Us",
                "email": "me@mydomain.com",
                "content": "My first note.",
                "tags": "Monday",
                "dttm": "2020-10-16T11:12:11.047Z"
              }
            ]
          schema:
            $ref: '../notes.yaml#/components/schemas/Notes'
        application/xml:
          example: |
            <notes>
              <note>
                <id>-UB_Ja5Qq</id>
                <email>me@mydomain.com</email>
                <content>Sent a new token.</content>
                <tags>Monday</tags>
                <dttm>2020-10-17T13:52:22.027Z</dttm>
              </note>
              <note>
                <id>-AU7_Ja5Us</id>
                <email>me@mydomain.com</email>
                <content>My first note.</content>
                <tags>Monday</tags>
                <dttm>2020-10-16T11:12:11.047Z</dttm>
              </note>
            </notes>
          schema:
            $ref: '../notes.yaml#/components/schemas/Notes'
    400:
      $ref: '../notes.yaml#/components/responses/400-BadRequest'
    401:
      $ref: '../notes.yaml#/components/responses/401-Unauthorized'
    429:
      $ref: '../notes.yaml#/components/responses/429-ToManyRequests'
    431:
      $ref: '../notes.yaml#/components/responses/431-HeaderFields431'
    5xx:
      $ref: '../notes.yaml#/components/responses/5xx'
delete:
  tags:
    - Notes
  summary: Delete user's Notes
  description: |
    Deletes all the **Notes** of a particular user. The email address in the JWT token is used to identify the user.
  x-codeSamples:
    - lang: 'bash'
      source: | 
        curl -H "Accept:application/json" \
        -H "Authorization: Bearer 1234FRTG67" \
        -X DELETE https://docs-as-code.herokuapp.com/notes | json_pp

        # Returns no content
    - lang: 'javascript'
      source: |
        const axios = require('axios');
        const options = {
          "headers": {"Accept": "application/json",
                      "Authorization": "Bearer 1234FRTG67"}
        };

        const resp = await axios.delete("https://docs-as-code.herokuapp.com/notes", options)
        console.log(resp.data);

        // Returns no content
  security:
    - BearerAuth: []
  parameters:
    - name: Accept
      in: header
      description: application/json (default) or application/xml
      required: false
      schema:
        type: string
        example: application/json
    - name: Authorization
      in: header
      description: JWT token
      required: true
      schema:
        type: string
        example: Bearer 1234FRTG67
  responses:
    '204':
      description: No Content
      content:
        application/json:
          example: null
        application/xml:
          example: null
    400:
      $ref: '../notes.yaml#/components/responses/400-BadRequest'
    401:
      $ref: '../notes.yaml#/components/responses/401-Unauthorized'
    429:
      $ref: '../notes.yaml#/components/responses/429-ToManyRequests'
    431:
      $ref: '../notes.yaml#/components/responses/431-HeaderFields431'
    5xx:
      $ref: '../notes.yaml#/components/responses/5xx'
